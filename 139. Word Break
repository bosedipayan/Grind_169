class Solution {
public:
    /*void getWordBreak(int idx,int n,string s,unordered_set<string> &st,string &str)
    {
        st.insert(str);
        
        for(int i=idx;i<n;i++)
        {
            str.push_back(s[idx]);
            getWordBreak(i+1,n,s,st,str);
            str.pop_back();
        }
    }*/
    bool wordBreak(string s, vector<string>& wordDict) {
        int n=s.size();
        
        vector<bool> dp(n+1,false);
        dp[0]=true;
        
        for(int i=1;i<=n;i++)
        {
            for(int j=0;j<i;j++)
            {
                if(dp[j] and find(wordDict.begin(),wordDict.end(),s.substr(j,i-j))!=wordDict.end())
                {
                    dp[i]=true;   
                }
            }
        }
        return dp[n];
    }
};
