/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    Node* sameGraph(unordered_map<int,Node*> &mp,Node* node)
    {
        Node* newNode = new Node(node->val);
        mp.insert({node->val, newNode});
        
        for(auto it: node->neighbors)
        {
            if(mp.find(it->val)!=mp.end())
            {
                newNode->neighbors.push_back(mp[it->val]);
            }
            else
            {
                Node* ptr = sameGraph(mp, it);
                newNode->neighbors.push_back(ptr);
            }
        }
        return newNode;
    }
    Node* cloneGraph(Node* node) {
        if(node == NULL)
        {
            return NULL;
        }
        
        unordered_map<int,Node*> mp;
        
        return sameGraph(mp, node);
    }
};
